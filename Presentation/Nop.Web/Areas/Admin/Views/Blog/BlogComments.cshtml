@model BlogCommentSearchModel

@inject IStoreService storeService
@using Nop.Services.Stores
@{
    //page title
    ViewBag.Title = T("Admin.ContentManagement.Blog.Comments").Text;
    //active menu item (system name)
    Html.SetActiveMenuItemSystemName("Blog comments");
}

@{
    const string hideSearchBlockAttributeName = "BlogCommentsPage.HideSearchBlock";
    var hideSearchBlock = genericAttributeService.GetAttribute<bool>(workContext.CurrentCustomer, hideSearchBlockAttributeName);
}

<nop-antiforgery-token />
<div class="content-header clearfix">
    <h1 class="pull-left">
        @T("Admin.ContentManagement.Blog.Comments")
    </h1>
    <div class="pull-right">
        <button type="button" id="approve-selected" class="btn bg-green">
            <i class="fa fa-check-square-o"></i>
            @T("Admin.ContentManagement.Blog.Comments.ApproveSelected")
        </button>
        <button type="button" id="disapprove-selected" class="btn bg-navy">
            <i class="fa fa-minus-square-o"></i>
            @T("Admin.ContentManagement.Blog.Comments.DisapproveSelected")
        </button>
        <button type="button" id="delete-selected" class="btn bg-red">
            <i class="fa fa-trash-o"></i>
            @T("Admin.ContentManagement.Blog.Comments.DeleteSelected")
        </button>
        <nop-action-confirmation asp-button-id="delete-selected" />
        @await Component.InvokeAsync("AdminWidget", new { widgetZone = AdminWidgetZones.BlogCommentListButtons })
    </div>
</div>

<div class="content">
    <div class="form-horizontal">
        <div class="panel-group">
            <div class="panel panel-default panel-search">
                <div class="panel-body">
                    <div class="row search-row @(!hideSearchBlock ? "opened" : "")" data-hideAttribute="@hideSearchBlockAttributeName">
                        <div class="search-text">@T("Admin.Common.Search")</div>
                        <div class="icon-search"><i class="fa fa-search" aria-hidden="true"></i></div>
                        <div class="icon-collapse"><i class="fa fa-angle-down" aria-hidden="true"></i></div>
                    </div>

                    <div class="search-body @(hideSearchBlock ? "closed" : "")">
                        <div class="row">
                            <div class="col-md-5">
                                <div class="form-group">
                                    <div class="col-md-4">
                                        <nop-label asp-for="CreatedOnFrom" />
                                    </div>
                                    <div class="col-md-8">
                                        <nop-editor asp-for="CreatedOnFrom" />
                                    </div>
                                </div>
                                <div class="form-group">
                                    <div class="col-md-4">
                                        <nop-label asp-for="CreatedOnTo" />
                                    </div>
                                    <div class="col-md-8">
                                        <nop-editor asp-for="CreatedOnTo" />
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-7">
                                <div class="form-group">
                                    <div class="col-md-4">
                                        <nop-label asp-for="SearchApprovedId" />
                                    </div>
                                    <div class="col-md-8">
                                        <nop-select asp-for="SearchApprovedId" asp-items="Model.AvailableApprovedOptions" />
                                    </div>
                                </div>
                                <div class="form-group">
                                    <div class="col-md-4">
                                        <nop-label asp-for="SearchText" />
                                    </div>
                                    <div class="col-md-8">
                                        <nop-editor asp-for="SearchText" />
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-7 col-md-offset-5">
                                <button type="button" id="search-comments" class="btn btn-primary btn-search">
                                    <i class="fa fa-search"></i>
                                    @T("Admin.Common.Search")
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="panel panel-default">
                <div class="panel-body">
                    @await Html.PartialAsync("Table", new DataTablesModel
                    {
                        Name = "comments-grid",
                        SearchButtonId = "search-comments",
                        UrlRead = new DataUrl("Comments", "Blog", new RouteValueDictionary { [nameof(Model.BlogPostId)] = Model.BlogPostId }),
                        UrlDelete = new DataUrl("CommentDelete", "Blog", null),
                        UrlUpdate = new DataUrl("CommentUpdate", "Blog", null),
                        Length = Model.PageSize,
                        LengthMenu = Model.AvailablePageSizes,
                        Filters = new List<FilterParameter>
                        {
                            new FilterParameter(nameof(Model.CreatedOnFrom)),
                            new FilterParameter(nameof(Model.CreatedOnTo)),
                            new FilterParameter(nameof(Model.SearchText)),
                            new FilterParameter(nameof(Model.SearchApprovedId))
                        },
                        ColumnCollection = new List<ColumnProperty>
                        {
                            new ColumnProperty(nameof(BlogCommentModel.Id))
                            {
                                IsMasterCheckBox = true,
                                Render = new RenderCheckBox("checkbox_comments"),
                                ClassName =  NopColumnClassDefaults.CenterAll,
                                Width = "50",
                            },
                            new ColumnProperty(nameof(BlogCommentModel.BlogPostTitle))
                            {
                                Title = T("Admin.ContentManagement.Blog.Comments.Fields.BlogPost").Text,
                                Width = "200",
                                Render = new RenderLink(new DataUrl("~/Admin/Blog/BlogPostEdit/", nameof(BlogCommentModel.BlogPostId)))
                            },
                            new ColumnProperty(nameof(BlogCommentModel.StoreName))
                            {
                                Title = T("Admin.ContentManagement.Blog.Comments.Fields.StoreName").Text,
                                Width = "100",
                                Visible = storeService.GetAllStores().Count > 1
                            },
                            new ColumnProperty(nameof(BlogCommentModel.CustomerInfo))
                            {
                                Title = T("Admin.ContentManagement.Blog.Comments.Fields.Customer").Text,
                                Width = "100",
                                Render = new RenderLink(new DataUrl("~/Admin/Customer/Edit/", nameof(BlogCommentModel.CustomerId)))
                            },
                            new ColumnProperty(nameof(BlogCommentModel.Comment))
                            {
                                Title = T("Admin.ContentManagement.Blog.Comments.Fields.Comment").Text,
                                Width = "200",
                                Encode = false
                            },
                            new ColumnProperty(nameof(BlogCommentModel.IsApproved))
                            {
                                Title = T("Admin.ContentManagement.Blog.Comments.Fields.IsApproved").Text,
                                Width = "100",
                                ClassName = NopColumnClassDefaults.CenterAll,
                                Render = new RenderBoolean(),
                                Editable = true,
                                EditType = EditType.Checkbox
                            },
                            new ColumnProperty(nameof(BlogCommentModel.CreatedOn))
                            {
                                Title = T("Admin.ContentManagement.Blog.Comments.Fields.CreatedOn").Text,
                                Width = "200",
                                ClassName =  NopColumnClassDefaults.Button,
                                Render = new RenderDate()
                            },
                            new ColumnProperty(nameof(BlogCommentModel.Id))
                            {
                                Title = T("Admin.Common.Edit").Text,
                                Width = "200",
                                ClassName =  NopColumnClassDefaults.Button,
                                Render = new RenderButtonsInlineEdit()
                            },
                            new ColumnProperty(nameof(BlogCommentModel.Id))
                            {
                                Title = T("Admin.Common.Delete").Text,
                                Width = "100",
                                Render = new RenderButtonRemove(T("Admin.Common.Delete").Text),
                                ClassName = NopColumnClassDefaults.Button
                            }
                        }
                    })

                    <script>
                        $(document).ready(function() {
                            //"delete selected" button
                            $("#delete-selected-action-confirmation-submit-button").bind("click", function () {
                                var postData = {
                                    selectedIds: selectedIds
                                };
                                addAntiForgeryToken(postData);
                                $.ajax({
                                    cache: false,
                                    type: "POST",
                                    url: "@(Url.Action("DeleteSelectedComments", "Blog"))",
                                    data: postData,
                                    error: function (jqXHR, textStatus, errorThrown) {
                                        $('#deleteSelectedCommentsFailed-info').text(errorThrown);
                                        $("#deleteSelectedCommentsFailed").click();
                                    },
                                    complete: function (jqXHR, textStatus) {
                                        updateTable('#comments-grid');
                                    }
                                });
                                $('#delete-selected-action-confirmation').modal('toggle');
                                return false;
                            });

                            //"approve selected" button
                            $('#approve-selected').click(function(e) {
                                    e.preventDefault();

                                    var postData = {
                                        selectedIds: selectedIds
                                    };
                                    addAntiForgeryToken(postData);

                                    $.ajax({
                                        cache: false,
                                        type: "POST",
                                        url: "@(Url.Action("ApproveSelected", "Blog"))",
                                        data: postData,
                                        traditional: true,
                                        error: function (jqXHR, textStatus, errorThrown) {
                                            $('#approveSelectedFailed-info').text(errorThrown);
                                            $("#approveSelectedFailed").click();
                                        },
                                        complete: function (jqXHR, textStatus) {
                                            updateTable('#comments-grid');
                                        }
                                    });
                                    return false;
                                });

                            //"disapprove selected" button
                            $('#disapprove-selected').click(function(e) {
                                    e.preventDefault();

                                    var postData = {
                                        selectedIds: selectedIds
                                    };
                                    addAntiForgeryToken(postData);

                                    $.ajax({
                                        cache: false,
                                        type: "POST",
                                        url: "@(Url.Action("DisapproveSelected", "Blog"))",
                                        data: postData,
                                        traditional: true,
                                        error: function (jqXHR, textStatus, errorThrown) {
                                            $('#disapproveSelectedFailed-info').text(errorThrown);
                                            $("#disapproveSelectedFailed").click();
                                        },
                                        complete: function (jqXHR, textStatus) {
                                            updateTable('#comments-grid');
                                        }
                                    });
                                    return false;
                                });
                        });
                    </script>
                </div>
            </div>
        </div>
    </div>
</div>
<nop-alert asp-alert-id="deleteSelectedCommentsFailed " />
<nop-alert asp-alert-id="approveSelectedFailed" />
<nop-alert asp-alert-id="disapproveSelectedFailed" />